{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","image","calories","ingredients","Card","className","style","width","Img","variant","src","Body","Title","Text","map","ingredient","text","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","Navbar","bg","Brand","href","Form","inline","fixed","onSubmit","e","preventDefault","onChange","target","value","Control","type","placeholder","Button","CardColumns","recipe","key","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yRAkBeA,EAhBA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAiBC,GAAyB,EAAnCC,SAAmC,EAAzBD,OAAOE,EAAkB,EAAlBA,YACxC,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,oBAAoBC,MAAO,CAAEC,MAAO,UAClD,kBAACH,EAAA,EAAKI,IAAN,CAAUC,QAAQ,MAAMC,IAAKT,IAC7B,kBAACG,EAAA,EAAKO,KAAN,KACE,kBAACP,EAAA,EAAKQ,MAAN,CAAYP,UAAU,QAAQL,GAC9B,kBAACI,EAAA,EAAKS,KAAN,KACGV,EAAYW,KAAI,SAAAC,GAAU,OACzB,4BAAKA,EAAWC,a,gCCyDbC,MA9Df,WACE,IADa,EAIiBC,mBAAS,IAJ1B,mBAINC,EAJM,KAIGC,EAJH,OAKeF,mBAAS,IALxB,mBAKNG,EALM,KAKEC,EALF,OAMaJ,mBAAS,IANtB,mBAMNK,EANM,KAMCC,EAND,KAQbC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAZf,WAYe,oBAXd,qCAUG,cACXM,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANA,2CAAH,qDAkBhB,OACE,yBAAK3B,UAAU,OACb,kBAAC8B,EAAA,EAAD,CAAQC,GAAG,UAAU3B,QAAQ,QAC3B,kBAAC0B,EAAA,EAAOE,MAAR,CAAcC,KAAK,SAAnB,cAEA,kBAACC,EAAA,EAAD,CAAMC,QAAM,EAACC,MAAM,MAAMC,SAXb,SAAAC,GAChBA,EAAEC,iBACFpB,EAASH,GACTC,EAAU,KAQwCuB,SAf/B,SAAAF,GACnBrB,EAAUqB,EAAEG,OAAOC,SAeb,kBAACR,EAAA,EAAKS,QAAN,CACEC,KAAK,OACLC,YAAY,SACZH,MAAO1B,EACPhB,UAAU,YAEZ,kBAAC8C,EAAA,EAAD,CAAQ1C,QAAQ,OAAOJ,UAAU,gBAAgB4C,KAAK,UAAtD,YAKJ,kBAACG,EAAA,EAAD,CAAa/C,UAAU,QACpBc,EAAQL,KAAI,SAAAuC,GAAM,OACjB,kBAAC,EAAD,CACEC,IAAKD,EAAOA,OAAOE,MACnBvD,MAAOqD,EAAOA,OAAOE,MACrBrD,SAAUmD,EAAOA,OAAOnD,SACxBD,MAAOoD,EAAOA,OAAOpD,MACrBE,YAAakD,EAAOA,OAAOlD,oBC/CnBqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.0a8049e0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nconst Recipe = ({ title, calories, image, ingredients }) => {\r\n  return (\r\n    <Card className=\"shadow-sm rounded\" style={{ width: \"20rem\" }}>\r\n      <Card.Img variant=\"top\" src={image} />\r\n      <Card.Body>\r\n        <Card.Title className=\"mb-2\">{title}</Card.Title>\r\n        <Card.Text>\r\n          {ingredients.map(ingredient => (\r\n            <li>{ingredient.text}</li>\r\n          ))}\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Recipe from \"./Recipe.js\";\nimport { Button, Navbar, Form, CardColumns } from \"react-bootstrap\";\n\nfunction App() {\n  const APP_ID = \"dc3d691f\";\n  const APP_KEY = \"d5cd505cbe187512f8889563afdffbb0\";\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  };\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <Navbar bg=\"primary\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Recipe App</Navbar.Brand>\n\n        <Form inline fixed=\"top\" onSubmit={getSearch} onChange={updateSearch}>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Search\"\n            value={search}\n            className=\"mr-sm-3\"\n          />\n          <Button variant=\"dark\" className=\"search-button\" type=\"submit\">\n            Search\n          </Button>\n        </Form>\n      </Navbar>\n      <CardColumns className=\"mt-5\">\n        {recipes.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </CardColumns>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}